//Deobfuscated with CENSORED

// 
// Decompiled by Procyon v0.5.36
// 

package cat.yoink.dream.impl.module.exploit;

import net.minecraftforge.fml.relauncher.ReflectionHelper;
import net.minecraft.util.math.MathHelper;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import cat.yoink.dream.api.util.CommandUtil;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.entity.item.EntityBoat;
import cat.yoink.dream.api.setting.SettingType;
import cat.yoink.dream.api.module.Category;
import java.lang.reflect.Field;
import cat.yoink.dream.api.setting.Setting;
import cat.yoink.dream.api.module.Module;

public class BoatClip extends Module
{
    int timer;
    boolean z;
    private final Setting BoatSpeed;
    protected static final Field vehiclemovey;
    
    public BoatClip(final String name, final String description, final Category category) {
        super(name, description, category);
        this.timer = 0;
        this.z = false;
        this.addSetting(this.BoatSpeed = new Setting.Builder(SettingType.INTEGER).setName("BoatSpeed").setModule(this).setIntegerValue(2).setMinIntegerValue(1).setMaxIntegerValue(5).build());
    }
    
    public void onUpdate() {
        if (this.mc.player == null) {
            return;
        }
        if (this.mc.player.getRidingEntity() instanceof EntityBoat) {
            final EntityBoat riding = (EntityBoat)this.mc.player.getRidingEntity();
            final CPacketVehicleMove packetVehicleMove = new CPacketVehicleMove((Entity)riding);
            final int xTo = 2;
            final int yTo = 56;
            final int zTo = 143;
            if (this.mc.gameSettings.keyBindBack.isKeyDown()) {
                try {
                    BoatClip.vehiclemovey.setInt(packetVehicleMove, -2);
                }
                catch (Exception e) {
                    e.printStackTrace();
                    CommandUtil.sendChatMessage("error");
                }
                if (this.mc.player.posY > 0.0) {
                    final EntityPlayerSP player = this.mc.player;
                    player.motionX -= this.getMotionX(this.mc.player.rotationYaw);
                    final EntityPlayerSP player2 = this.mc.player;
                    player2.motionZ -= this.getMotionZ(this.mc.player.rotationYaw);
                }
            }
            this.mc.getConnection().sendPacket((Packet)new CPacketPlayer.PositionRotation(this.mc.player.posX + this.mc.player.motionX, this.mc.player.posY + (this.z ? 0.0625 : (this.mc.gameSettings.keyBindJump.isKeyDown() ? 0.0624 : 1.0E-8)) - (this.z ? 0.0625 : (this.mc.gameSettings.keyBindSneak.isKeyDown() ? 0.0624 : 2.0E-8)), this.mc.player.posZ + this.mc.player.motionZ, this.mc.player.rotationYaw, this.mc.player.rotationPitch, false));
            this.z = !this.z;
            this.mc.getConnection().sendPacket((Packet)packetVehicleMove);
        }
        if (this.mc.player.posY < 0.0) {
            ++this.timer;
        }
        else {
            this.timer = 0;
        }
        if (this.timer == 20) {
            CommandUtil.sendRawChatMessage("trying to clip");
        }
        if (this.timer > 20 && this.mc.player.posY < 0.0) {
            this.timer = 21;
            if (this.mc.player.isRiding()) {
                this.mc.player.dismountRidingEntity();
            }
            final double oldMotionX = this.mc.player.motionX;
            final double oldMotionY = this.mc.player.motionY;
            final double oldMotionZ = this.mc.player.motionZ;
            final double[] dir = this.moveLooking();
            if ((this.mc.gameSettings.keyBindForward.isKeyDown() || this.mc.gameSettings.keyBindLeft.isKeyDown() || this.mc.gameSettings.keyBindRight.isKeyDown() || this.mc.gameSettings.keyBindBack.isKeyDown()) && !this.mc.gameSettings.keyBindJump.isKeyDown()) {
                this.mc.player.motionX = this.getMotionX(this.mc.player.cameraYaw) * 0.26;
                this.mc.player.motionZ = this.getMotionZ(this.mc.player.cameraYaw) * 0.26;
            }
            this.mc.getConnection().sendPacket((Packet)new CPacketPlayer.PositionRotation(this.mc.player.posX + this.mc.player.motionX, this.mc.player.posY + (this.z ? 0.0625 : (this.mc.gameSettings.keyBindJump.isKeyDown() ? 0.0624 : 1.0E-8)) - (this.z ? 0.0625 : (this.mc.gameSettings.keyBindSneak.isKeyDown() ? 0.0624 : 2.0E-8)), this.mc.player.posZ + this.mc.player.motionZ, this.mc.player.rotationYaw, this.mc.player.rotationPitch, false));
            this.mc.getConnection().sendPacket((Packet)new CPacketPlayer.PositionRotation(this.mc.player.posX + this.mc.player.motionX, 1337.0 + this.mc.player.posY, this.mc.player.posZ + this.mc.player.motionZ, this.mc.player.rotationYaw, this.mc.player.rotationPitch, true));
            this.mc.getConnection().sendPacket((Packet)new CPacketEntityAction((Entity)this.mc.player, CPacketEntityAction.Action.START_FALL_FLYING));
            this.mc.player.motionX = oldMotionX;
            this.mc.player.motionY = oldMotionY;
            this.mc.player.motionZ = oldMotionZ;
        }
    }
    
    public double[] moveLooking() {
        return new double[] { this.mc.player.rotationYaw * 360.0f / 360.0f * 180.0f / 180.0f, 0.0 };
    }
    
    private double getMotionX(final float yaw) {
        return MathHelper.sin(-yaw * 0.017453292f * 1.0f) * this.BoatSpeed.getIntegerValue();
    }
    
    private double getMotionZ(final float yaw) {
        return MathHelper.cos(yaw * 0.017453292f) * 1.0f * this.BoatSpeed.getIntegerValue();
    }
    
    static {
        vehiclemovey = ReflectionHelper.findField((Class)CPacketVehicleMove.class, new String[] { "y", "y", "b" });
    }
}
